{"version":3,"sources":["images/Expertly/expertly_main_page.png","images/TheCursed/landing_page.png","images/Choose/choose.png","containers/NavBar.js","containers/BlogList.js","containers/ProjectList.js","components/About.js","components/Home.js","components/Post.js","containers/MainBody.js","constants.js","components/AdminLogin.js","components/NewPost.js","components/AdminBlogList.js","components/EditPost.js","containers/Admin.js","App.js","store.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","dispatch","useDispatch","className","onClick","type","href","target","rel","size","BlogList","showBlogList","useSelector","state","posts","map","post","key","id","date_pretty","title","content","substring","currentPost","ProjectList","showProjectList","Fragment","src","require","alt","About","showAbout","Home","showHome","Post","showPost","MainBody","BACKEND_URL","AdminLogin","useState","username","setUsername","password","setPassword","logIn","user","a","fetch","credentials","method","headers","accept","body","JSON","stringify","response","json","currentUser","onSubmit","event","preventDefault","onChange","value","placeholder","NewPost","setTitle","setContent","submitPost","e","date","now","Date","year","getFullYear","month","getMonth","day","getDate","formatted","pretty","toLocaleDateString","generateDate","newPost","date_formatted","user_id","createPost","AdminBlogList","EditPost","loggedIn","editPost","updatedPost","Admin","newBlogPost","useEffect","handleLogout","App","exact","path","component","store","createStore","currentState","action","showExpertly","showSelectedBlog","window","__REDUX_DEVTOOLS_EXTENSION__","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8ed9afa1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/expertly_main_page.107c4246.png\";","module.exports = __webpack_public_path__ + \"static/media/landing_page.d6f6ab3d.png\";","module.exports = __webpack_public_path__ + \"static/media/choose.fb5f718a.png\";","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {MarkGithubIcon, HomeFillIcon, CodeSquareIcon, NoteIcon, InfoIcon} from '@primer/octicons-react'\n\n\nfunction NavBar() {\n  let dispatch = useDispatch()\n  return (\n    <div className='nav'>\n        <div className='nav_icon' onClick={() => dispatch({type: \"SHOW_HOME\"})}>Home</div>\n        <div className='nav_icon' onClick={() => dispatch({type: \"SHOW_ABOUT\"})}>About</div>\n        <div className='nav_icon' onClick={() => dispatch({type: \"SHOW_BLOG_LIST\"})}>Blog</div>\n        <div className='nav_icon' onClick={() => dispatch({type: \"SHOW_PROJECT_LIST\"})}>Projects</div>\n        <a className='nav_icon' href='https://github.com/jamesjlandry' target=\"_blank\" rel=\"noopener noreferrer\" ><MarkGithubIcon size={16}/></a>\n    </div>\n  );\n}\n\nexport default NavBar;","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport { useSelector, useDispatch } from 'react-redux';\n\n\nfunction BlogList() {\n    const showBlogList = useSelector(state => state.showBlogList)\n    const posts = useSelector(state => state.posts)\n    const dispatch = useDispatch()\n\n  return (\n    <div >\n     {showBlogList ?\n    <div className='blog_container'>\n        {posts.map(post => (\n        <div className='blog_snip' key={post.id}>\n          <div className='blog_date'>\n            {post.date_pretty}\n          </div>\n          <div>\n            {post.title}\n          </div>\n          <div className='blog_snip_paragraph'>\n            {post.content.substring(0, 200)}...\n          </div>\n          <div className='read_more' onClick={()=> dispatch({type: 'SHOW_POST', currentPost: post})}>Read More -</div>\n        </div>)\n        )}\n    </div> \n    :\n    null\n    }\n    </div>\n  );\n}\n\nexport default BlogList;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\n\nfunction ProjectList() {\n  const showProjectList = useSelector(state => state.showProjectList)\n  const dispatch = useDispatch()\n  return (\n    <React.Fragment >\n       {showProjectList ?\n      <div className=\"project_list\">\n        <div className=\"project_background\"></div>\n        <div className='project_card' >\n          <img src={require('../images/Expertly/expertly_main_page.png')} alt='Expertly Home Page'></img>\n          <div className='expertly_card'><strong><h1>Expertly</h1></strong></div>\n          <div className='project_info'>\n            <p>Ask questions with confidence. Get answers from real experts in their field. </p><a href='https://github.com/jamesjlandry/expertly_front_end' target=\"_blank\" rel=\"noopener noreferrer\" >GitHub Repo</a>\n          </div>\n        </div> \n        <div className='project_card' >\n        <img src={require('../images/TheCursed/landing_page.png')} alt='The Cursed Home Page'></img>\n          <div className='cursed_card'><strong><h1>The Cursed</h1></strong></div>\n          <div className='project_info'>\n            <p>TableTop Roleplaying for the modern age. Build your character. Level them up. Try to take over the world. </p><a href='https://youtu.be/xLv1ZAYcieI' target=\"_blank\" rel=\"noopener noreferrer\" >YouTube Demo</a>\n          </div>\n        </div> \n        <div className='project_card' >\n          <img src={require('../images/Choose/choose.png')} alt='Choose Your Own Adventure Game'></img>\n          <div className='choose_adventure_card'><strong><h1>Choose Your Own<br></br> Adventure</h1></strong></div>\n          <div className='project_info'>\n            <p>Choose your own adventure CLI app for the Self Join table connoisseur. </p><a href='https://github.com/jamesjlandry/mod_1_project_choose_your_adventure' target=\"_blank\" rel=\"noopener noreferrer\" >GitHub Repo</a>\n          </div>\n        </div> \n      <div>\n      \n    </div> \n    </div>\n    :\n    null\n    }\n    </React.Fragment>\n  );\n}\n\nexport default ProjectList;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\n\nfunction About() {\n\n  const dispatch = useDispatch()\n  const showAbout = useSelector(state => state.showAbout)\n\n  return (\n    <div  >\n      { showAbout ?\n      <div className='about'>\n        Coming Soon...\n      </div>\n      :\n      null\n      }\n    </div>\n  );\n}\n\nexport default About;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\n\nfunction Home() {\n\n  const dispatch = useDispatch()\n  const showHome = useSelector(state => state.showHome)\n\n  return (\n    <div  >\n    {showHome ? \n    <div className='home_page' ><h1>Hi. I'm James. <br></br>\n    I'm a Junior Full Stack Web Dev.</h1><p>I believe in clean and simple UX that stays out of the way of the user. I'm also into art, design, and all things creative.</p></div>\n    :\n    null}\n    </div>\n  );\n}\n\nexport default Home;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\n\nfunction Post() {\n\n  const currentPost = useSelector(state => state.currentPost)\n  const showPost = useSelector(state => state.showPost)\n  const dispatch = useDispatch()\n\n  return (\n    <React.Fragment>\n      {\n        showPost ?\n    <div className='blog_post' >\n      <div>\n        {currentPost.title}\n      </div>\n      <div>\n        {currentPost.content}\n      </div>\n    </div>\n    :\n    null\n      }\n    </React.Fragment>\n  );\n}\n\nexport default Post;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport BlogList from './BlogList'\nimport ProjectList from './ProjectList'\nimport About from '../components/About'\nimport Home from '../components/Home'\nimport Post from '../components/Post'\n\nfunction MainBody() {\n  \n  let dispatch = useDispatch()\n  return (\n    <div className=\"main_body\">\n      <BlogList/>\n      <ProjectList/>\n      <Post />\n      <About/>\n      <Home />\n    \n    </div>\n  );\n}\n\nexport default MainBody;","export const BACKEND_URL = process.env.NODE_ENV === 'production' ? 'http://www.hopefuldev.life/' : 'http://localhost:3000'","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useState } from 'react'\nimport { BACKEND_URL } from '../constants'\n\nfunction AdminLogin() {\n\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch()\n\n\n\n\n\n let logIn = async (user) => {\n   let response = await fetch(`${BACKEND_URL}/login`, {\n       credentials: 'include',\n       method: \"POST\",\n       headers: {\n           accept: 'application/json',\n           'content-type': 'application/json'\n       },\n       body: JSON.stringify(user)\n   })\n   let currentUser = await response.json()\n   if (currentUser !== null) {\n       dispatch({type: \"SET_LOG_IN\", currentUser: currentUser})\n      \n    }\n    }\n\n    let handleSubmit = (e) => {\n      e.preventDefault();\n      let user = {\n          username: username,\n          password: password,\n      }\n      logIn(user)\n      }\n  return (\n    <div className=\"page_background_blur\">\n     <form className='login_box' onSubmit={event => handleSubmit(event)}>\n       <h1>HopefulDevLife</h1>\n        <input\n            onChange={event => setUsername(event.target.value)}\n            id='username'\n            placeholder='enter username'\n            type='text'\n            value={username}\n        />\n          <input\n              onChange={event => setPassword(event.target.value)} \n              id=\"password\" \n              placeholder=\"password\"\n              type=\"password\" \n              value={password}\n          />\n\n          <div>\n                <button type=\"submit\">Make It So</button>\n          </div>\n     </form>\n\n\n    </div>\n  );\n}\n\nexport default AdminLogin;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { BACKEND_URL } from '../constants'\n\n// this form creates a new post using current date time to add to the content. It currently only uses plain text, would like to add rich text component.\n// user information must be present to create posts. \nfunction NewPost() {\n    const dispatch = useDispatch() \n    const user = useSelector(state => state.currentUser) \n     const [title, setTitle] = useState('')\n     const [content, setContent] = useState('')\n\n     const generateDate = () => {\n      const now = new Date();\n      const options = { month: \"long\", day: \"numeric\", year: \"numeric\" };\n  \n      const year = now.getFullYear();\n  \n      let month = now.getMonth() + 1;\n      if (month < 10) {\n        month = `0${month}`;\n      }\n  \n      const day = now.getDate();\n      if (day < 10) {\n        day = `0${day}`;\n      }\n  \n      return {\n        formatted: `${year}-${month}-${day}`,\n        pretty: now.toLocaleDateString(\"en-US\", options)\n      };\n    };\n\n    const submitPost = (e) => {\n      e.preventDefault();\n      const date = generateDate();\n      const newPost = {\n        title: title,\n        date_formatted: date.formatted,\n        date_pretty: date.pretty,\n        content: content,\n        user_id: user.id\n      };\n      createPost(newPost)\n       \n    };\n\n      let createPost = async (post) => {\n        let response = await fetch(`${BACKEND_URL}/posts`, {\n            credentials: 'include',\n            method: \"POST\",\n            headers: {\n                accept: 'application/json',\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify(post)\n        })\n        let newPost = await response.json()\n         dispatch({type: \"ADD_POST\", post: newPost})\n         }\n\n   \n         \n         \n\n  return (\n    <div className='page_background_blur'>\n    <div className='post_form'>\n      <button type='button' onClick={() => dispatch({type: 'NEW_BLOG_FALSE'})}>\n         Changed My Mind, Close Form\n       </button>\n       <form onSubmit={event => submitPost(event)}>\n         <div className=\"blog_title\" >\n          <div>\n           \n          </div>\n          <input\n            placeholder=\"title\"\n            id=\"title-field\"\n            type=\"text\"\n            value={title}\n            onChange={({ target: { value } }) => {\n              setTitle(value);\n            }}\n          />\n          </div>\n          <div className=\"blog_content\">\n            <div>\n          \n          </div>\n          <textarea\n            placeholder='Write some stuff'\n            id=\"content\"\n            type=\"text\"\n            value={content}\n            onChange={({ target: { value } }) => {\n              setContent(value);\n            }}\n            />\n          </div>\n          <button type=\"submit\">Make It So</button>\n        </form>\n    </div>\n    </div>\n  );\n}\n\nexport default NewPost;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom'\n\n\nfunction AdminBlogList() {\n\n  const posts = useSelector(state => state.posts)\n  const dispatch = useDispatch()\n\n\n\n  return (\n    <div className='blog_container'> \n      {posts.map(post => (\n      <div >\n        <div>\n          {post.title}\n        </div>\n        <div className='blog_snip'>\n          <p>\n            {post.content.substring(0, 200)}...\n          </p>\n          <button type='button' onClick={()=> dispatch({type: \"EDIT_CURRENT_POST\", currentPost: post})}>Edit Post</button>\n         \n        </div>\n      </div>)\n      )}\n     \n    </div>\n  );\n}\n\nexport default AdminBlogList;","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { BACKEND_URL } from '../constants'\n\n\nfunction EditPost() {\n\n  const loggedIn = useSelector(state => state.loggedIn)\n  const user = useSelector(state => state.currentUser) \n  const currentPost = useSelector(state => state.currentPost)\n  const dispatch = useDispatch()\n  const [title, setTitle] = useState(currentPost.title)\n  const [content, setContent] = useState(currentPost.content)\n\n  \n\n const submitPost = (e, currentPost) => {\n    e.preventDefault();\n    const updatedPost = {\n      title: title,\n      \n      content: content,\n      user_id: user.id\n    };\n    editPost(updatedPost, currentPost)\n     \n  };\n\n  let editPost = async (post, currentPost) => {\n    let response = await fetch(`${BACKEND_URL}/posts/${currentPost.id}`, {\n        credentials: 'include',\n        method: \"PATCH\",\n        headers: {\n            accept: 'application/json',\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(post)\n    })\n    let updatedPost = await response.json()\n     dispatch({type: \"UPDATE_POST\", post: updatedPost})\n     }\n\n  // I would like to abstract the New Post and Edit Post form to be the same form so I am not repeating my work.\n\n  return (\n   <div>\n     {loggedIn ?\n      <div className='page_background_blur'>\n      <div className='post_form'>\n        <button type='button' onClick={() => dispatch({type: 'EDIT_BLOG_FALSE'})}>\n           Changed My Mind, Close Form\n         </button>\n         <form onSubmit={event => submitPost(event, currentPost)}>\n           <div className=\"blog_title\" >\n            <div>\n             \n            </div>\n            <input\n              \n              id=\"title-field\"\n              type=\"text\"\n              value={title}\n              onChange={({ target: { value } }) => {\n                setTitle(value);\n              }}\n            />\n            </div>\n            <div className=\"blog_content\">\n              <div>\n           \n            </div>\n            <textarea\n              id=\"content\"\n              type=\"text\"\n              value={content}\n              onChange={({ target: { value } }) => {\n                setContent(value);\n              }}\n              />\n            </div>\n            <button type=\"submit\">Make It So</button>\n          </form>\n      </div>\n      </div>\n    : \n        null\n    }\n     \n    </div>\n  );\n}\n\nexport default EditPost;","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport BlogList from './BlogList'\nimport ProjectList from './ProjectList'\nimport About from '../components/About'\nimport AdminLogin from '../components/AdminLogin'\nimport NewPost from '../components/NewPost'\nimport AdminBlogList from '../components/AdminBlogList'\nimport EditPost from '../components/EditPost'\nimport { BACKEND_URL } from '../constants'\n\n// checks for the site admin as the only user created. if the admin is not logged in, shows login box\n// otherwise the admin can make new blog posts and edit current posts from this page.\n\nfunction Admin() {\n\n  const loggedIn = useSelector(state => state.loggedIn)\n  const newBlogPost = useSelector(state => state.newBlogPost)\n  const editPost = useSelector(state => state.editPost)\n  const dispatch = useDispatch()\n\n    useEffect( async () => {\n      let response = await fetch(`${BACKEND_URL}/logged_in`, {\n            credentials: 'include',\n            \n        })\n        \n        let currentUser = await response.json()\n        if (currentUser !== null) {\n            dispatch({type: \"SET_LOG_IN\", currentUser: currentUser})\n        } \n    }, [])\n\n    const handleLogout = async () => {\n      let response = await fetch(`${BACKEND_URL}/log_out`, {\n          credentials: 'include',\n          method: 'DELETE'\n      })\n      let loggedOut = await response.json()\n      dispatch({type: \"LOG_OUT\" })\n    }\n \n  return (\n    <div className=\"Admin\">\n     {loggedIn ? \n     <div>\n       <button className='log_out' type='button' onClick={() => handleLogout()}>Log Out</button>\n       \n       {newBlogPost ?\n       <NewPost />\n      :\n      <div className='new_post_div'>\n      <button className='new_post' type='button' onClick={() => dispatch({type: 'NEW_BLOG_TRUE'})}>\n        <strong>New Post</strong> \n       </button>\n       </div>\n      }\n      {editPost ? \n        <EditPost />\n      :\n      null\n      }\n       <AdminBlogList /> \n     </div>\n     :\n     <AdminLogin/>}\n    </div>\n  );\n}\n\nexport default Admin;","import React, { useEffect} from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport NavBar from './containers/NavBar';\nimport MainBody from './containers/MainBody';\nimport Admin  from './containers/Admin';\nimport { BACKEND_URL } from './constants'\n\n\n\n\nfunction App() {\n\n  const dispatch = useDispatch()\n\n  useEffect( async () => {\n    let response = await fetch(`${BACKEND_URL}/posts`)\n    let posts = await response.json()\n    dispatch({type: \"SET_POSTS\", posts: posts})\n   \n  },[])\n\n  return (\n    <div className=\"App\">\n      <NavBar/>\n      <MainBody/>\n      <BrowserRouter>\n        <Route exact path='/admin' component={Admin} />\n        \n       \n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;","import {createStore, bindActionCreators} from 'redux';\n\nconst reducer = (currentState, action) => {\n    if (action.type === \"SET_LOG_IN\") {\n        return {\n            ...currentState,\n            loggedIn: true,\n            showBlogList: false,\n            showAbout: false,\n            showProjectList: false,\n            showHome: false,\n            showPost: false,\n            currentUser: action.currentUser\n        }\n    }\n\n    if (action.type === \"LOG_OUT\") {\n        return {\n            ...currentState,\n            loggedIn: false\n        }\n    }\n\n    if (action.type === \"SET_POSTS\") {\n        return {\n            ...currentState,\n            posts: action.posts\n        }\n    }\n\n    if (action.type === \"EDIT_CURRENT_POST\") {\n        return {\n            ...currentState,\n            currentPost: action.currentPost,\n            editPost: true\n        }\n    }\n\n    if (action.type === \"ADD_POST\") {\n        return {\n            ...currentState,\n            posts: [...currentState.posts, action.post],\n            newBlogPost: false\n        }\n    }\n\n    if (action.type === \"UPDATE_POST\") {\n        \n    \n        return {\n            ...currentState,\n            posts: currentState.posts.map(post => post.id === action.post.id ? \n                {...post, title: action.post.title, content: action.post.content} :\n                post),\n            editPost: false\n        }\n    }\n\n    if (action.type === \"NEW_BLOG_TRUE\") {\n        return {\n            ...currentState,\n            newBlogPost: true\n        }\n    }\n\n    if (action.type === \"NEW_BLOG_FALSE\") {\n        return {\n            ...currentState,\n            newBlogPost: false\n        }\n    }\n\n    if (action.type === \"EDIT_BLOG_FALSE\") {\n        return {\n            ...currentState,\n            editPost: false\n        }\n    }\n\n    if (action.type === \"SHOW_BLOG_LIST\") {\n        return {\n            ...currentState,\n            showBlogList: true,\n            showAbout: false,\n            showProjectList: false,\n            showHome: false,\n            showExpertly: false,\n            showPost: false\n        }\n    }\n\n    if (action.type === \"SHOW_PROJECT_LIST\") {\n        return {\n            ...currentState,\n            showBlogList: false,\n            showAbout: false,\n            showProjectList: true,\n            showHome: false,\n            showExpertly: false,\n            showPost: false\n        }\n    }\n\n    if (action.type === \"SHOW_ABOUT\") {\n        return {\n            ...currentState,\n            showBlogList: false,\n            showAbout: true,\n            showProjectList: false,\n            showHome: false,\n            showExpertly: false,\n            showPost: false\n        }\n    }\n\n    if (action.type === \"SHOW_HOME\") {\n        return {\n            ...currentState,\n            showBlogList: false,\n            showAbout: false,\n            showProjectList: false,\n            showHome: true,\n            showExpertly: false,\n            showPost: false\n        }\n    }\n\n    if (action.type === \"SHOW_POST\") {\n        return {\n            ...currentState,\n            showBlogList: false,\n            showAbout: false,\n            showProjectList: false,\n            showHome: false,\n            showPost: true,\n            showExpertly: false,\n            currentPost: action.currentPost\n        }\n    }\n\n    if (action.type === \"SHOW_EXPERTLY\") {\n        return {\n            ...currentState,\n            showBlogList: false,\n            showAbout: false,\n            showProjectList: false,\n            showHome: false,\n            showPost: false,\n            showExpertly: true,\n            \n        }\n    }\n\n    return currentState\n\n}\n\nlet initialState = {\n    currentUser: {},\n    currentPost: {},\n    showAbout: false,\n    showBlogList: false,\n    showPost: false,\n    showProjectList: false,\n    showExpertly: false,\n    showSelectedBlog: false,\n    newBlogPost: false,\n    editPost: false,\n    showHome: true,\n    loggedIn: false,\n    posts: [],\n\n}\n\nconst store = createStore(reducer, initialState, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\nwindow.store = store\n\nexport default store","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store'\nimport {Provider} from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n  \n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}